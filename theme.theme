<?php

/**
 * @file
 * Functions to support theming in the GLA Estate theme.
 */

 /**
  * Implements hook_css_alter().
  */
 function theme_css_alter(&$css) {

   // We need to unset these here as they don't get removed in the info file with libraries-override.
   if (isset($css['core/themes/stable/css/content_moderation/content_moderation.module.css'])) {
     unset($css['core/themes/stable/css/content_moderation/content_moderation.module.css']);
   }
   if (isset($css['core/themes/stable/css/content_moderation/content_moderation.theme.css'])) {
     unset($css['core/themes/stable/css/content_moderation/content_moderation.theme.css']);
   }
 }

 /**
 * Implements hook_preprocess_html().
 */
 function theme_preprocess_html(&$variables) {

  $theme_colour = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'theme-color',
      'content' => '#bada55',
    ],
  ];

  $variables['page']['#attached']['html_head'][] = [$theme_colour, 'theme_colour'];
}

/**
 * Implements hook_preprocess_form_element() for form element templates.
 */
function theme_preprocess_form_element(&$variables) {

  if ($variables['type'] == 'checkbox') {
    $variables['is_checkbox'] = TRUE;
    $variables['label']['#attributes']['class'][] = 'custom-input';
    $variables['label']['#attributes']['class'][] = 'custom-checkbox';
  }
  if ($variables['type'] == 'radio') {
    $variables['is_radio'] = TRUE;
    $variables['label']['#attributes']['class'][] = 'custom-input';
    $variables['label']['#attributes']['class'][] = 'custom-radio';
  }

}

/**
 * Implements hook_form_alter().
 */
function theme_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'something') {
    $form['submit']['#attributes']['class'][] = 'button--modifier';
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function theme_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'page_title') {
    $route = \Drupal::routeMatch()->getRouteName();
    if ($route == 'entity.node.edit_form') {
      $suggestions[] = 'page_title__node_edit';
    }
  }
}

/**
 * Implements template_preprocess_paragraph().
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */
function theme_preprocess_paragraph(&$variables) {
	$paragraph = $variables['paragraph'];
	$current_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
	$type = $paragraph->getType();
	$theme_libraries = \Drupal::service('library.discovery')->getLibrariesByExtension($current_theme);

	// Attach general component styles.
  $variables['#attached']['library'][] = $current_theme . '/component';
	if (isset($paragraph)) {
		// Check if there's a library that matches the machine name of the component, and load it if so.
		if (array_key_exists($type, $theme_libraries)) {
			$variables['#attached']['library'][] = $current_theme . '/' . $type . '';
		}
	}
}
